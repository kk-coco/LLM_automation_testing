#generate_test_case_prompt: |
#  # Write pytest script based on the following API specification and scenario
#  # API Specification:{{api_spec}}
#  #  Scenario: {{test_scenario}}
#  import
#generate_test_case_prompt: |
#  # Create test code in Pytest, Requests, and Python 3.10. Use the following swagger documentation, considering the API call relationship,
#  such as getting api information before edit api, verifying the add function needs to verify the response from the get api
#  information. After adding a new resource, generation needs to cover all the input parameters and all edge cases
#  # API Specification:{{api_spec}}
#  #  Scenario: {{scenario}}
#  import
#before 09/07/2025
#generate_test_case_prompt:
#  system: |
#    You are an experienced test engineer specialising in code coverage, REST API testing, and scenario based testing.
#    Only return clean pytest scripts without any explanations.
#  user: |
#    # Please create test code in Python 3.10 in Pytest format and using the requests library for testing the API
#    defined by the following API information
#    # API Info :{{selected_apis}}
#    The test code should cover the following scenario, all possible status code response and all edge cases.
#    #  Scenario: {{selected_scenarios}}
#    import
generate_test_case_prompt:
  system: |
    You are an experienced test engineer specializing in code coverage, REST API testing, and scenario based testing.
    Only return clean pytest scripts without any explanations.
  user: |
    # Please create test code in Python 3.10 in Pytest format and using the requests library for testing the API 
    defined by the following API information
    # API Info :{{selected_apis}}
    The test code should cover the following scenario, all possible status code response and all edge cases. 
    #  Scenario: {{selected_scenarios}}
    The generated code should avoid syntax error.
#    for example @pytest.mark.xxxx,
generate_test_scenario_prompt:
  system: |
    You are a testing expert who specialises in writing precise and comprehensive test scenarios based on API 
    specifications. You must always return only the final test scenarios in a clean numbered list format. Do not 
    include any explanations, comments, or formatting other than the list.
  user: |
    Given the following API specifications, write comprehensive test scenarios that meet these requirements:
    1. Strictly adhere to the API parameters and responses.
    2. Carefully analyse all provided APIs, including their upstream and downstream dependencies.
    3. Generate test scenarios covering:
       - Individual API test cases (single API verification).
       - Combined workflows involving all provided APIs.
    4. Include both positive (valid and successful) test scenarios and negative (error and edge case) scenarios. 
    Ensure positive scenarios are fully and clearly covered.
    5. Consider all possible input combinations, status code responses, and edge cases.

    # Swagger document :{{selected_apis}}
    Return only a numbered list of the final test scenario titles. 

check_parameter_type_correctness:
  system: |
    You are an expert assistant specialized in analyzing test scripts against API specifications for parameter data type coverage. 
    You must always return a valid JSON object without any extra commentary or explanation.
  user: |
    Analyze the test script against the API specifications and provide a coverage report with the following requirements:
    1. Strictly check parameter data types in the script against API specs only
    2. Output must include:
      - "coverage": overall percentage based on all matched parameters across endpoints
      - "detail": an object with per-endpoint breakdown including:
        * "matched": number of parameters with correctly matched types
        * "total": total number of parameters defined in the API spec
        * "coverage_percent": matched รท total ร 100
        * "mismatches": a list of mismatched parameters showing expected and actual types
    3. Only include parameters that are defined in the API specifications.
    4. Output must be **strictly** formatted like this (replace values with actual results):
    {
      "coverage": XX,
      "detail":{
        "api_path_1": {
          "matched": X,
          "total": X,
          "coverage_percent": X,
          "mismatches": [
            {
              "name": "XX",
              "expected": "XX",
              "actual": "XX"
            }
          ]
        },
          "api_path_2": {
            ...
          }
      } 
    }
    API specifications: {{selected_apis}}
    Test script: {{generated_script}}
    Respond with only the formatted JSON object. Do not include any other text.



